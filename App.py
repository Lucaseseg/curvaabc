import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from streamlit_option_menu import option_menu
from sklearn.cluster import KMeans
import google.generativeai as genai
import time
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, PageBreak
from reportlab.lib import colors
from reportlab.lib.units import inch
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from scipy import stats
import re
from streamlit_modal import Modal
import markdown  # Import para convers√£o de Markdown

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="An√°lise Curva ABC", page_icon="üìä", layout="wide")

# Configura√ß√£o da API do Google Gemini
api_key = st.secrets["GOOGLE_API_KEY"]  # Ou st.secrets["google"]["api_key"] se usar estrutura aninhada

if api_key:
    genai.configure(api_key=api_key)
else:
    st.error("Chave API do Google Gemini n√£o encontrada. Por favor, configure a vari√°vel GOOGLE_API_KEY nas Secrets do Streamlit.")

# CSS Personalizado para estiliza√ß√£o
def custom_css():
    st.markdown("""
    <style>
    /* Barra Lateral */
    [data-testid="stSidebar"] {
        background-color: #f0f0f0; /* Cor neutra */
        color: #333333; /* Texto escuro para contraste */
        padding: 20px;
    }

    /* Fundo da P√°gina */
    .css-1d391kg { 
        background-color: #F4F6F7; /* Fundo claro e neutro */
        margin: 0;
        padding: 0;
    }

    /* Rodap√© */
    .footer {
        position: fixed;
        right: 20px;
        bottom: 20px;
        font-size: 24px;
        color: #27AE60;
    }

    .footer .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }

    .footer .tooltip .tooltiptext {
        visibility: hidden;
        width: 160px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 8px 0;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .footer .tooltip .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: #555 transparent transparent transparent;
    }

    .footer .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }

    /* Bot√µes Personalizados */
    .stButton>button {
        background-color: #27AE60; /* Verde mais neutro */
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

    .stButton>button:hover {
        background-color: #1E8449; /* Verde escuro */
    }

    /* Cabe√ßalhos */
    .header-title {
        color: #27AE60;
        font-size: 36px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
    }

    /* Tabelas */
    .dataframe {
        border: 2px solid #27AE60;
        border-radius: 10px;
    }

    /* Pop-Up */
    .modal-content {
        background-color: #fff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
    }

    .modal-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .modal-header h2 {
        color: #27AE60;
    }

    .modal-body p {
        color: #34495E;
        font-size: 16px;
        line-height: 1.6;
    }

    .modal-footer {
        text-align: center;
        margin-top: 20px;
    }

    .modal-footer button {
        background-color: #27AE60;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .modal-footer button:hover {
        background-color: #1E8449;
    }
    </style>
    """, unsafe_allow_html=True)

custom_css()

# Fun√ß√£o para exibir o logo na barra lateral
def exibir_logo():
    img_path = "eseg.png"  # Substitua pelo caminho da sua imagem
    if os.path.exists(img_path):
        st.sidebar.image(img_path, caption="ESEG Corp", use_column_width=True)
    else:
        st.sidebar.warning("Logo n√£o encontrado!")

# Fun√ß√£o para carregar a planilha
def carregar_planilha(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.xlsx'):
            return pd.read_excel(uploaded_file)
    except Exception as e:
        st.sidebar.error(f"Erro ao carregar a planilha: {e}")
    st.sidebar.error("Formato n√£o suportado. Use .csv ou .xlsx.")
    return None

# Fun√ß√£o para converter markdown para ReportLab
def markdown_para_reportlab(texto):
    # Converte Markdown para HTML
    html = markdown.markdown(texto)

    # Substituir listas n√£o ordenadas e ordenadas por tags compat√≠veis
    html = html.replace('<ul>', '<bullet>').replace('</ul>', '</bullet>')
    html = html.replace('<ol>', '<ordered>').replace('</ol>', '</ordered>')
    html = html.replace('<li>', '<bullet>&bull; ').replace('</li>', '</bullet>')

    # Remover outras tags HTML
    clean_text = re.sub('<[^<]+?>', '', html)

    return clean_text

# Fun√ß√£o para calcular Curva ABC
def calcular_curva_abc(df):
    df = df.copy()
    df['Valor Total'] = df['Pre√ßo'] * df['Quantidade']
    df_sorted = df.sort_values(by='Valor Total', ascending=False).reset_index(drop=True)
    df_sorted['% Acumulado'] = df_sorted['Valor Total'].cumsum() / df_sorted['Valor Total'].sum() * 100
    df_sorted['Classe'] = 'C'
    df_sorted.loc[df_sorted['% Acumulado'] <= 80, 'Classe'] = 'A'
    df_sorted.loc[(df_sorted['% Acumulado'] > 80) & (df_sorted['% Acumulado'] <= 95), 'Classe'] = 'B'
    return df_sorted

# Fun√ß√£o para preprocessar os dados
def preprocessar_dados(df):
    df = df.dropna(subset=["Pre√ßo", "Quantidade"])
    z_scores = np.abs(stats.zscore(df[["Pre√ßo", "Quantidade"]]))
    df = df[(z_scores < 3).all(axis=1)]
    return df

# Fun√ß√£o para determinar o n√∫mero √≥timo de clusters
def determinar_n_clusters(df, max_clusters=10):
    scaler = StandardScaler()
    features = ["Pre√ßo", "Quantidade"]
    scaled_features = scaler.fit_transform(df[features])

    sse = []
    silhouette_scores = []
    for k in range(2, max_clusters + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(scaled_features)
        sse.append(kmeans.inertia_)
        score = silhouette_score(scaled_features, kmeans.labels_)
        silhouette_scores.append(score)

    # Sugest√£o de N√∫mero de Clusters
    best_k = silhouette_scores.index(max(silhouette_scores)) + 2
    st.success(f"N√∫mero √≥timo de clusters sugerido: *{best_k}*")

    # Plot M√©todo do Cotovelo e Silhouette Score
    fig, ax1 = plt.subplots(figsize=(8, 4))  # Reduzido o tamanho para melhor ajuste
    color = '#27AE60'
    ax1.set_xlabel('N√∫mero de Clusters')
    ax1.set_ylabel('SSE', color=color)
    ax1.plot(range(2, max_clusters + 1), sse, marker='o', color=color, label='SSE')
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.legend(loc='upper left')

    ax2 = ax1.twinx()
    color = '#E67E22'
    ax2.set_ylabel('Silhouette Score', color=color)
    ax2.plot(range(2, max_clusters + 1), silhouette_scores, marker='x', color=color, label='Silhouette Score')
    ax2.tick_params(axis='y', labelcolor=color)
    ax2.legend(loc='upper right')

    plt.title('M√©todo do Cotovelo e Silhouette Score', fontsize=14)
    plt.tight_layout()
    st.pyplot(fig)

    return best_k

# Fun√ß√£o para aplicar K-Means e retornar os centr√≥ides e DataFrame clusterizado
def aplicar_kmeans(df, n_clusters=3):
    scaler = StandardScaler()
    features = ["Pre√ßo", "Quantidade"]
    scaled_features = scaler.fit_transform(df[features])

    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    df["Cluster"] = kmeans.fit_predict(scaled_features)

    # Centr√≥ides na escala original
    centroids = scaler.inverse_transform(kmeans.cluster_centers_)
    centroids_df = pd.DataFrame(centroids, columns=features)
    centroids_df['Cluster'] = range(n_clusters)

    return df, centroids_df

# Fun√ß√£o para visualizar distribui√ß√£o das classes ABC nos clusters e retornar a crosstab
def visualizar_abc_clusters(df):
    crosstab = pd.crosstab(df['Classe'], df['Cluster'])
    return crosstab

# Fun√ß√£o para gerar an√°lise da curva ABC
def gerar_analise_gemini(df):
    produtos_str = df[['Nome', 'Quantidade', 'Pre√ßo', 'Classe', 'Cluster']].to_string(index=False)
    data_atual = time.strftime('%d/%m/%Y √†s %H:%M')  # Captura a data e hora atual

    # Prompt fixo para an√°lise
    prompt = (
        f"Data e Hora do Relat√≥rio: {data_atual}\n\n"
        f"A partir de agora voc√™ √© um especialista em Supply Chain. "
        f"Fa√ßa uma an√°lise detalhada desses produtos com base na curva ABC e nos clusters identificados. "
        f"Explique o que os clusters indicam sobre o comportamento dos produtos e forne√ßa insights "
        f"sobre estoque, faturamento e poss√≠veis sinergias entre produtos do mesmo cluster. "
        f"Seja breve, por√©m seja extremamente espec√≠fico com os produtos a seguir:\n{produtos_str}"
    )

    model = genai.GenerativeModel("gemini-1.5-flash")

    # Exibir o spinner antes de gerar a resposta
    with st.spinner("Gerando an√°lise..."):
        response = model.generate_content(prompt)

        # Simula√ß√£o de digita√ß√£o da resposta
        resposta_texto = response.text
        resposta_container = st.empty()  # Cria um espa√ßo para a resposta

        # Simula√ß√£o do efeito de digita√ß√£o
        for i in range(len(resposta_texto) + 1):
            resposta_container.markdown(resposta_texto[:i], unsafe_allow_html=True)
            time.sleep(0.005)  # Ajuste o tempo para controlar a velocidade da digita√ß√£o

    # Salvar a an√°lise gerada no estado da sess√£o
    st.session_state.analise_gemini = resposta_texto

# Fun√ß√£o para adicionar produtos manualmente com callback
def adicionar_produto():
    nome = st.session_state.nome_produto
    preco = st.session_state.preco_produto
    quantidade = st.session_state.quantidade_produto

    if nome and preco > 0 and quantidade > 0:
        if 'produtos' not in st.session_state:
            st.session_state.produtos = []
        st.session_state.produtos.append(
            {"Nome": nome, "Pre√ßo": preco, "Quantidade": quantidade}
        )
        st.sidebar.success(f"Produto *{nome}* adicionado com sucesso!")
        # Limpar os campos ap√≥s adicionar
        st.session_state.nome_produto = ""
        st.session_state.preco_produto = 0.0
        st.session_state.quantidade_produto = 0
    else:
        st.sidebar.error("Preencha todos os campos corretamente.")

# Fun√ß√£o para adicionar produtos manualmente
def adicionar_produto_manual():
    with st.sidebar.expander("üìã Gerenciamento de Produtos", expanded=False):
        st.markdown("### Adicionar Produto Manualmente")
        nome = st.text_input("üìù Nome do Produto", key="nome_produto")
        preco = st.number_input("üí∞ Pre√ßo (R$)", min_value=0.0, format="%.2f", key="preco_produto")
        quantidade = st.number_input("üì¶ Quantidade", min_value=0, step=1, key="quantidade_produto")

        st.button("‚ûï Adicionar Produto", key="botao_adicionar", on_click=adicionar_produto)

# Fun√ß√µes para salvar gr√°ficos em imagens
def salvar_grafico_pizza(data, titulo):
    buffer = BytesIO()
    fig, ax = plt.subplots(figsize=(3, 3))  # Tamanho reduzido para melhor ajuste
    ax.pie(
        data,
        labels=data.index,
        autopct='%1.1f%%',
        startangle=90,
        colors=sns.color_palette("pastel")[:len(data)],
        wedgeprops={'edgecolor': 'white'}
    )
    ax.set_title(titulo, fontsize=12, color="#27AE60")
    ax.axis('equal')
    plt.tight_layout()
    plt.savefig(buffer, format="PNG")
    buffer.seek(0)
    plt.close(fig)
    return buffer

def salvar_grafico_dispersao(df):
    buffer = BytesIO()
    fig, ax = plt.subplots(figsize=(4, 3))  # Tamanho reduzido para melhor ajuste
    sns.scatterplot(
        x='Quantidade', y='Pre√ßo', data=df, hue='Cluster', palette='deep', s=60, edgecolor='white', alpha=0.7, ax=ax
    )
    plt.title('Dispers√£o de Pre√ßo x Quantidade com Clusters', fontsize=12, color="#27AE60")
    plt.xlabel('Quantidade', fontsize=10)
    plt.ylabel('Pre√ßo (R$)', fontsize=10)
    plt.legend(title='Cluster', fontsize=8, title_fontsize=10)
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.savefig(buffer, format="PNG")
    buffer.seek(0)
    plt.close(fig)
    return buffer

# Fun√ß√£o para gerar PDF com gr√°ficos e an√°lise formatada
def gerar_pdf(df, class_counts, class_counts2, analise_texto):
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=30, leftMargin=30,
        topMargin=30, bottomMargin=18
    )
    elements = []

    # Define os estilos
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='CenterTitle',
        parent=styles['Title'],
        alignment=TA_CENTER,
        fontSize=24,
        spaceAfter=20,
        spaceBefore=20
    ))
    styles.add(ParagraphStyle(
        name='SectionHeader',
        fontSize=18,
        spaceAfter=10,
        textColor=colors.HexColor("#27AE60"),
        leading=22,
        alignment=TA_LEFT
    ))
    # Renomear 'Heading1' e 'Heading2' para evitar conflito
    styles.add(ParagraphStyle(
        name='CustomHeading1',
        parent=styles['Heading1'],
        fontSize=18,
        leading=22,
        spaceAfter=12,
        textColor=colors.HexColor("#27AE60")
    ))
    styles.add(ParagraphStyle(
        name='CustomHeading2',
        parent=styles['Heading2'],
        fontSize=16,
        leading=20,
        spaceAfter=10,
        textColor=colors.HexColor("#27AE60")
    ))
    styles.add(ParagraphStyle(
        name='NormalLeft',
        alignment=TA_LEFT,
        fontSize=12,
        spaceAfter=10,
        leading=15
    ))
    # Renomear o estilo para 'CustomBullet' para evitar conflito
    styles.add(ParagraphStyle(
        name='CustomBullet',
        parent=styles['Normal'],
        leftIndent=20,
        bulletIndent=10,
        bulletFontName='Helvetica',
        bulletFontSize=12,
    ))

    # Capa
    if os.path.exists("eseg.png"):
        logo = "eseg.png"
        im = Image(logo, 3 * inch, 0.8 * inch)
        im.hAlign = 'CENTER'
        elements.append(im)
        elements.append(Spacer(1, 12))

    # T√≠tulo na capa
    elements.append(Paragraph("Relat√≥rio de An√°lise da Curva ABC", styles['CenterTitle']))
    elements.append(Spacer(1, 50))
    elements.append(PageBreak())

    # Sum√°rio Manual
    elements.append(Paragraph("Sum√°rio", styles['SectionHeader']))
    elements.append(Spacer(1, 12))
    sumario = """
    1. Introdu√ß√£o ......................................... 1
    2. Metodologia ........................................ 2
    3. Estat√≠sticas Descritivas ........................... 3
    4. Tabela de Produtos ................................. 4
    5. Gr√°ficos ........................................... 5
    6. Detalhamento dos Clusters .......................... 6
    7. An√°lise Detalhada com Google Gemini ................ 7
    8. Recomenda√ß√µes ...................................... 8
    9. Refer√™ncias ........................................ 9
    """
    for linha in sumario.strip().split('\n'):
        elements.append(Paragraph(linha.strip(), styles['NormalLeft']))
    elements.append(PageBreak())

    # Sum√°rio Executivo
    elements.append(Paragraph("Sum√°rio Executivo", styles['SectionHeader']))
    elements.append(Paragraph(
        "Este relat√≥rio apresenta uma an√°lise detalhada da Curva ABC dos produtos, incluindo a clusteriza√ß√£o utilizando o m√©todo K-Means. Os principais objetivos s√£o identificar produtos de alta import√¢ncia, otimizar o gerenciamento de estoque e fornecer insights estrat√©gicos para melhorar o desempenho da empresa.",
        styles['NormalLeft']
    ))
    elements.append(PageBreak())

    # **Introdu√ß√£o**
    elements.append(Paragraph("Introdu√ß√£o", styles['SectionHeader']))
    elements.append(Paragraph(
        "A Curva ABC √© uma t√©cnica amplamente utilizada na gest√£o de estoques e processos, permitindo a classifica√ß√£o dos itens com base em sua import√¢ncia relativa. Atrav√©s dessa an√°lise, √© poss√≠vel identificar quais produtos s√£o mais relevantes para o faturamento e foco estrat√©gico da empresa. Este relat√≥rio tem como objetivo aplicar a an√°lise da Curva ABC aos produtos listados, fornecendo insights que auxiliem na tomada de decis√µes gerenciais.",
        styles['NormalLeft']
    ))
    elements.append(PageBreak())

    # **Metodologia**
    elements.append(Paragraph("Metodologia", styles['SectionHeader']))
    elements.append(Paragraph(
        "Para a elabora√ß√£o deste relat√≥rio, adotamos a seguinte metodologia:",
        styles['NormalLeft']
    ))
    metodologia = [
        "1. **Coleta de Dados:** Reunimos informa√ß√µes sobre os produtos, incluindo nome, pre√ßo unit√°rio e quantidade em estoque.",
        "2. **C√°lculo do Valor Total:** Calculamos o valor total de cada produto multiplicando o pre√ßo unit√°rio pela quantidade.",
        "3. **Ordena√ß√£o Decrescente:** Organizamos os produtos em ordem decrescente de valor total para identificar os itens de maior impacto financeiro.",
        "4. **C√°lculo do Percentual Acumulado:** Determinamos o percentual acumulado de cada produto em rela√ß√£o ao valor total acumulado de todos os produtos.",
        "5. **Classifica√ß√£o ABC:** Classificamos os produtos em classes A, B ou C com base nos seguintes crit√©rios:",
        "   - **Classe A:** Itens que representam at√© 80% do valor acumulado.",
        "   - **Classe B:** Itens que representam entre 80% e 95% do valor acumulado.",
        "   - **Classe C:** Itens que representam os 5% restantes do valor acumulado.",
        "6. **An√°lise de Clusteriza√ß√£o (K-Means):** Aplicamos o algoritmo K-Means para identificar agrupamentos naturais entre os produtos, considerando as vari√°veis de pre√ßo e quantidade.",
        "7. **Interpreta√ß√£o dos Resultados:** Analisamos os clusters e as classes ABC para extrair insights sobre o comportamento dos produtos e oportunidades de otimiza√ß√£o.",
    ]
    # Texto detalhado para cada t√≥pico
    metodologia_detalhada = {
        "1": """
Reunimos informa√ß√µes detalhadas sobre os produtos comercializados pela empresa. Essa etapa √© crucial para garantir que a an√°lise seja baseada em dados precisos e abrangentes. Os dados coletados incluem:

- **Nome do Produto:** Identifica√ß√£o √∫nica de cada item, permitindo a distin√ß√£o clara entre os diferentes produtos no portf√≥lio.
- **Pre√ßo Unit√°rio:** Valor monet√°rio pelo qual cada unidade do produto √© vendida. Este dado √© essencial para o c√°lculo do faturamento potencial e da margem de lucro.
- **Quantidade em Estoque:** N√∫mero de unidades dispon√≠veis de cada produto. Essa informa√ß√£o √© fundamental para avaliar a disponibilidade do produto para vendas futuras e para o planejamento de reposi√ß√£o de estoque.
        """,
        "2": """
Nesta etapa, calculamos o valor total que cada produto representa no estoque, multiplicando o pre√ßo unit√°rio pela quantidade em estoque.

Este c√°lculo permite identificar o peso financeiro de cada produto no invent√°rio total da empresa. Produtos com alto valor total podem indicar itens de alta rotatividade ou produtos de alto custo que exigem aten√ß√£o especial na gest√£o.
        """,
        "3": """
Ap√≥s calcular o valor total de cada produto, organizamos os itens em ordem decrescente com base nesse valor. Esta ordena√ß√£o facilita a visualiza√ß√£o dos produtos que mais contribuem para o valor total do estoque. Ao ordenar os produtos desta forma, conseguimos:

- Identificar rapidamente os produtos de maior impacto financeiro.
- Priorizar a an√°lise e gest√£o dos itens mais relevantes.
- Estabelecer uma base para a classifica√ß√£o ABC.

A ordena√ß√£o √© feita utilizando ferramentas de an√°lise de dados que permitem a manipula√ß√£o eficiente de grandes volumes de informa√ß√µes.
        """,
        "4": """
Com os produtos ordenados, calculamos o percentual acumulado do valor total para cada produto em rela√ß√£o ao valor total acumulado de todos os produtos.

Este percentual acumulado ajuda a compreender como cada produto contribui para o valor total do estoque e √© fundamental para a defini√ß√£o das classes A, B e C na etapa seguinte.
        """,
        "5": """
Com base nos percentuais acumulados, classificamos os produtos em tr√™s categorias principais, seguindo a metodologia da Curva ABC:

- **Classe A:** Produtos que representam aproximadamente os primeiros 80% do valor acumulado. Geralmente, constituem cerca de 20% dos itens em quantidade, mas s√£o os mais valiosos em termos financeiros. Esses produtos requerem um gerenciamento rigoroso de estoque, previs√µes de demanda precisas e aten√ß√£o especial em termos de qualidade e disponibilidade.
- **Classe B:** Produtos que contribuem com os pr√≥ximos 15% do valor acumulado, totalizando at√© 95% quando somados aos da Classe A. Correspondem a uma parcela maior em quantidade, mas com menor impacto individual no valor total. Devem ser monitorados regularmente, com foco em otimiza√ß√£o de estoque e melhoria de efici√™ncia.
- **Classe C:** Produtos que representam os √∫ltimos 5% do valor acumulado. Apesar de serem numerosos (podendo chegar a 50% dos itens em quantidade), t√™m baixo impacto financeiro. A gest√£o desses itens pode ser simplificada para reduzir custos operacionais, evitando excesso de estoque e obsolesc√™ncia.

A classifica√ß√£o √© aplicada conforme os seguintes crit√©rios:

- **Classe A:** Percentual acumulado de 0% a 80%.
- **Classe B:** Percentual acumulado acima de 80% at√© 95%.
- **Classe C:** Percentual acumulado acima de 95% at√© 100%.

Essa categoriza√ß√£o permite alocar recursos de forma eficiente, focando nos produtos que mais influenciam o desempenho financeiro da empresa.
        """,
        "6": """
Para aprofundar a an√°lise e identificar padr√µes ocultos nos dados, aplicamos o algoritmo de clusteriza√ß√£o K-Means. Este m√©todo agrupa os produtos com caracter√≠sticas similares, considerando m√∫ltiplas vari√°veis. O processo envolve:

- **Sele√ß√£o das Vari√°veis de An√°lise:** Utilizamos as vari√°veis 'Pre√ßo Unit√°rio' e 'Quantidade em Estoque' para capturar tanto o valor monet√°rio quanto a disponibilidade de cada produto.
- **Normaliza√ß√£o dos Dados:** Padronizamos as vari√°veis para eliminar diferen√ßas de escala que possam influenciar os resultados. A normaliza√ß√£o √© feita transformando os dados para que tenham m√©dia zero e desvio padr√£o um.
- **Determina√ß√£o do N√∫mero √ìtimo de Clusters:** Utilizamos m√©todos estat√≠sticos, como o m√©todo do cotovelo (Elbow Method) e o coeficiente de silhueta (Silhouette Score), para definir o n√∫mero adequado de clusters que melhor segmenta os dados sem super ou subagrupamentos.
- **Aplica√ß√£o do Algoritmo K-Means:** Com o n√∫mero de clusters definido, aplicamos o K-Means para segmentar os produtos. O algoritmo atribui cada produto ao cluster cujo centroide (ponto m√©dio) √© o mais pr√≥ximo, minimizando a variabilidade dentro dos clusters.
- **An√°lise dos Clusters Formados:** Avaliamos as caracter√≠sticas de cada cluster, como m√©dias e dispers√µes, para interpretar os grupos formados. Isso nos ajuda a identificar segmentos de produtos com comportamentos semelhantes.

A clusteriza√ß√£o complementa a an√°lise ABC, oferecendo uma vis√£o multidimensional dos produtos e auxiliando na elabora√ß√£o de estrat√©gias espec√≠ficas para cada grupo.
        """,
        "7": """
Com os produtos classificados e agrupados, procedemos √† interpreta√ß√£o detalhada dos resultados:

- **An√°lise da Distribui√ß√£o das Classes ABC nos Clusters:** Verificamos como os produtos das classes A, B e C est√£o distribu√≠dos entre os diferentes clusters. Isso pode revelar, por exemplo, se produtos de alto valor (Classe A) est√£o concentrados em determinados clusters.
- **Identifica√ß√£o de Padr√µes e Tend√™ncias:** Avaliamos se existem tend√™ncias, como produtos de baixo pre√ßo e alta quantidade em um cluster espec√≠fico, ou produtos de alto pre√ßo e baixa quantidade em outro. Essas informa√ß√µes podem indicar segmentos de mercado ou comportamentos de consumo.
- **Insights para Gest√£o de Estoque:** Compreendemos quais clusters requerem maior aten√ß√£o em termos de reposi√ß√£o de estoque, negocia√ß√£o com fornecedores ou estrat√©gias de precifica√ß√£o.
- **Oportunidades de Sinergia e Otimiza√ß√£o:** Identificamos possibilidades de agrupar produtos para promo√ß√µes conjuntas, otimizar log√≠stica de armazenamento ou ajustar o mix de produtos oferecidos.
- **Avalia√ß√£o de Riscos:** Reconhecemos produtos ou clusters que possam representar riscos, como excesso de estoque em itens de baixa rotatividade ou depend√™ncia excessiva de poucos produtos para o faturamento total.

A interpreta√ß√£o dos resultados √© fundamental para transformar a an√°lise em a√ß√µes estrat√©gicas. Envolve a colabora√ß√£o entre diferentes √°reas da empresa, como log√≠stica, vendas, marketing e finan√ßas, para alinhar as decis√µes aos objetivos organizacionais.
        """
    }

    for passo in metodologia:
        match = re.match(r'^(\d+)\.\s(.*)', passo.strip())
        if match:
            num = match.group(1)
            title = match.group(2)
            elements.append(Paragraph(f"<b>{num}. {title}</b>", styles['NormalLeft']))
            elements.append(Spacer(1, 6))
            if num in metodologia_detalhada:
                detalhe = metodologia_detalhada[num]
                # Processar formata√ß√µes dentro do texto
                detalhe = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', detalhe)
                detalhe = re.sub(r'\*(.*?)\*', r'<i>\1</i>', detalhe)
                # Adicionar quebras de linha
                detalhe = detalhe.replace('\n', '<br/>')
                elements.append(Paragraph(detalhe, styles['NormalLeft']))
                elements.append(Spacer(1, 12))
        else:
            # Processar subitens (por exemplo, itens com '   - ')
            subitem_match = re.match(r'^\s+-\s(.*)', passo.strip())
            if subitem_match:
                subtext = subitem_match.group(1)
                subtext = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', subtext)
                subtext = re.sub(r'\*(.*?)\*', r'<i>\1</i>', subtext)
                elements.append(Paragraph(subtext, styles['NormalLeft'], bulletText='‚Ä¢'))
                elements.append(Spacer(1, 6))
            else:
                elements.append(Paragraph(passo.strip(), styles['NormalLeft']))
                elements.append(Spacer(1, 6))
    elements.append(PageBreak())

    # Estat√≠sticas Descritivas
    elements.append(Paragraph("Estat√≠sticas Descritivas", styles['SectionHeader']))
    descr = df[['Pre√ßo', 'Quantidade']].describe().round(2)
    data = [['M√©trica', 'Pre√ßo (R$)', 'Quantidade']]
    for index, row in descr.iterrows():
        data.append([index, row['Pre√ßo'], row['Quantidade']])
    table = Table(data, hAlign='LEFT')
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#27AE60")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ])
    table.setStyle(table_style)

    # Alternar cores das linhas
    for i in range(1, len(data)):
        bg_color = colors.lightgrey if i % 2 == 0 else colors.whitesmoke
        table_style.add('BACKGROUND', (0, i), (-1, i), bg_color)
    table.setStyle(table_style)

    elements.append(table)
    elements.append(PageBreak())

    # Tabela de Produtos Detalhada
    elements.append(Paragraph("Tabela de Produtos", styles['SectionHeader']))
    data = [['Nome', 'Pre√ßo (R$)', 'Quantidade', 'Valor Total (R$)', '% Acumulado', 'Classe', 'Cluster']]
    for index, row in df.iterrows():
        data.append([
            row['Nome'],
            f"{row['Pre√ßo']:.2f}",
            row['Quantidade'],
            f"{row['Valor Total']:.2f}",
            f"{row['% Acumulado']:.2f}%",
            row['Classe'],
            row['Cluster']
        ])

    table = Table(data, hAlign='LEFT', repeatRows=1)
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#27AE60")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ])
    table.setStyle(table_style)

    # Alternar cores das linhas
    for i in range(1, len(data)):
        bg_color = colors.lightgrey if i % 2 == 0 else colors.whitesmoke
        table_style.add('BACKGROUND', (0, i), (-1, i), bg_color)
    table.setStyle(table_style)

    elements.append(table)
    elements.append(PageBreak())

    # Gr√°ficos
    elements.append(Paragraph("Gr√°ficos", styles['SectionHeader']))

    # Distribui√ß√£o das Classes
    elements.append(Paragraph("Distribui√ß√£o das Classes (A, B, C)", styles['SectionHeader']))
    grafico_pizza_classe = salvar_grafico_pizza(class_counts, "Distribui√ß√£o das Classes (A, B, C)")
    im_pizza_classe = Image(grafico_pizza_classe, 3 * inch, 3 * inch)  # Tamanho reduzido
    im_pizza_classe.hAlign = 'CENTER'
    elements.append(im_pizza_classe)
    elements.append(Spacer(1, 12))

    # Distribui√ß√£o dos Clusters
    elements.append(Paragraph("Distribui√ß√£o dos Clusters", styles['SectionHeader']))
    grafico_pizza_cluster = salvar_grafico_pizza(class_counts2, "Distribui√ß√£o dos Clusters")
    im_pizza_cluster = Image(grafico_pizza_cluster, 3 * inch, 3 * inch)  # Tamanho reduzido
    im_pizza_cluster.hAlign = 'CENTER'
    elements.append(im_pizza_cluster)
    elements.append(PageBreak())

    # Gr√°fico de Dispers√£o
    elements.append(Paragraph("Gr√°fico de Dispers√£o de Clusters", styles['SectionHeader']))
    grafico_dispersao = salvar_grafico_dispersao(df)
    im_dispersao = Image(grafico_dispersao, 4 * inch, 3 * inch)  # Tamanho reduzido
    im_dispersao.hAlign = 'CENTER'
    elements.append(im_dispersao)
    elements.append(PageBreak())

    # Detalhamento dos Clusters
    elements.append(Paragraph("Detalhamento dos Clusters", styles['SectionHeader']))
    centroids = df.groupby('Cluster').agg({
        'Pre√ßo': 'mean',
        'Quantidade': 'mean',
        'Valor Total': 'mean'
    }).round(2)
    centroids.reset_index(inplace=True)
    data = [['Cluster', 'Pre√ßo M√©dio (R$)', 'Quantidade M√©dia', 'Valor Total M√©dio (R$)']]
    for index, row in centroids.iterrows():
        data.append([
            row['Cluster'],
            f"{row['Pre√ßo']:.2f}",
            row['Quantidade'],
            f"{row['Valor Total']:.2f}"
        ])
    table = Table(data, hAlign='LEFT')
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#27AE60")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ])
    table.setStyle(table_style)

    # Alternar cores das linhas
    for i in range(1, len(data)):
        bg_color = colors.lightgrey if i % 2 == 0 else colors.whitesmoke
        table_style.add('BACKGROUND', (0, i), (-1, i), bg_color)
    table.setStyle(table_style)

    elements.append(table)
    elements.append(PageBreak())

    # An√°lise Detalhada
    elements.append(Paragraph("An√°lise Detalhada com Google Gemini", styles['SectionHeader']))

    # Processar 'analise_texto' para aplicar formata√ß√£o
    lines = analise_texto.strip().split('\n')

    for line in lines:
        line = line.strip()
        if not line:
            elements.append(Spacer(1, 12))
            continue

        # Processar cabe√ßalhos
        if line.startswith('## '):
            header_text = line[3:].strip()
            elements.append(Paragraph(header_text, styles['CustomHeading2']))
        elif line.startswith('# '):
            header_text = line[2:].strip()
            elements.append(Paragraph(header_text, styles['CustomHeading1']))
        else:
            # Processar negrito '**texto**' e it√°lico '*texto*'
            line = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', line)
            line = re.sub(r'\*(.*?)\*', r'<i>\1</i>', line)
            # Processar listas n√£o ordenadas
            if line.startswith('- '):
                bullet_text = line[2:].strip()
                elements.append(Paragraph(bullet_text, styles['NormalLeft'], bulletText='‚Ä¢'))
                elements.append(Spacer(1, 6))
            # Processar listas ordenadas
            elif re.match(r'^\d+\.\s', line):
                match = re.match(r'^(\d+)\.\s(.*)', line)
                num = match.group(1)
                text = match.group(2)
                elements.append(Paragraph(text.strip(), styles['NormalLeft'], bulletText=f'{num}.'))
                elements.append(Spacer(1, 6))
            else:
                # Par√°grafo normal
                elements.append(Paragraph(line, styles['NormalLeft']))
                elements.append(Spacer(1, 6))
    elements.append(PageBreak())

    # Recomenda√ß√µes
    elements.append(Paragraph("Recomenda√ß√µes", styles['SectionHeader']))
    elements.append(Paragraph(
        "Com base na an√°lise realizada, recomendamos as seguintes a√ß√µes para otimizar o gerenciamento de estoque e aumentar o faturamento:",
        styles['NormalLeft']
    ))
    elements.append(Spacer(1, 12))
    recomendacoes = [
        "1. *Foco nos Produtos Classe A:* Priorizar o gerenciamento e controle de estoque dos produtos classificados como Classe A, pois representam a maior parte do valor total.",
        "2. *Promo√ß√µes para Produtos Classe B:* Implementar estrat√©gias de marketing e promo√ß√µes para os produtos Classe B a fim de aumentar sua contribui√ß√£o para o valor total.",
        "3. *Redu√ß√£o de Estoque de Classe C:* Considerar a redu√ß√£o do estoque ou descontinua√ß√£o dos produtos Classe C que n√£o contribuem significativamente para o faturamento.",
        "4. *Sinergias entre Clusters:* Identificar produtos dentro dos mesmos clusters que possam ser vendidos em conjunto para aumentar as vendas cruzadas.",
        "5. *Revis√£o Peri√≥dica:* Realizar an√°lises peri√≥dicas da Curva ABC e dos clusters para ajustar as estrat√©gias conforme as mudan√ßas no comportamento de compra dos clientes."
    ]

    for rec in recomendacoes:
        match = re.match(r'^(\d+)\.\s(.*)', rec.strip())
        if match:
            num = match.group(1)
            text = match.group(2)
            # Processar it√°lico dentro do texto
            text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
            elements.append(Paragraph(text, styles['NormalLeft'], bulletText=f'{num}.'))
            elements.append(Spacer(1, 6))
        else:
            elements.append(Paragraph(rec.strip(), styles['NormalLeft']))
            elements.append(Spacer(1, 6))
    elements.append(PageBreak())

    # Refer√™ncias
    elements.append(Paragraph("Refer√™ncias", styles['SectionHeader']))
    referencias = [
        "- Metodologia ABC: https://pt.wikipedia.org/wiki/An%C3%A1lise_ABC",
        "- K-Means Clustering: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html",
        "- Ballou, R. H. (2006). Gerenciamento da Cadeia de Suprimentos/Log√≠stica Empresarial. Bookman.",
        "- Slack, N., Chambers, S., & Johnston, R. (2009). Administra√ß√£o da Produ√ß√£o. Atlas.",
        "- Chopra, S., & Meindl, P. (2016). Gerenciamento da Cadeia de Suprimentos: Estrat√©gia, Planejamento e Opera√ß√£o. Pearson.",
        "- An√°lise ABC: https://pt.wikipedia.org/wiki/An%C3%A1lise_ABC",
        "- Supply Chain Management: https://pt.wikipedia.org/wiki/Gest%C3%A3o_da_cadeia_de_suprimentos"
    ]

    for ref in referencias:
        elements.append(Paragraph(ref.strip('- '), styles['NormalLeft'], bulletText='‚Ä¢'))
        elements.append(Spacer(1, 6))
    elements.append(PageBreak())

    # Rodap√© com data e n√∫mero de p√°gina
    def add_footer(canvas_obj, doc_obj):
        page_num = canvas_obj.getPageNumber()
        page_text = f"P√°gina {page_num}"
        date_text = f"Data: {time.strftime('%d/%m/%Y √†s %H:%M')}"

        canvas_obj.setFont('Helvetica', 10)
        canvas_obj.setFillColor(colors.grey)

        # Posiciona a data no centro, na parte inferior da p√°gina
        canvas_obj.drawCentredString(A4[0] / 2.0, 0.5 * inch, date_text)
        # Posiciona o n√∫mero da p√°gina abaixo da data
        canvas_obj.drawCentredString(A4[0] / 2.0, 0.35 * inch, page_text)

    # Constru√ß√£o do documento com o novo rodap√©
    doc.build(elements, onFirstPage=add_footer, onLaterPages=add_footer)
    buffer.seek(0)
    return buffer.getvalue()

# Fun√ß√£o para baixar o PDF no Streamlit (sidebar)
def baixar_pdf_sidebar():
    if 'pdf' in st.session_state:
        st.sidebar.download_button(
            label="üì• Baixar Relat√≥rio em PDF",
            data=st.session_state['pdf'],
            file_name="relatorio_curva_abc.pdf",
            mime="application/pdf",
            key='download_pdf_sidebar'
        )
    else:
        st.sidebar.info("Gerar o relat√≥rio na aba 'An√°lise Gemini' para disponibilizar o download.")

# Fun√ß√£o para adicionar o rodap√© com √≠cone e tooltip usando Emoji
def adicionar_footer():
    footer_html = """
    <div class="footer">
        <div class="tooltip">
            ‚ö°  
            <span class="tooltiptext">Powered by ALJ Corp</span>
        </div>
    </div>
    """
    st.markdown(footer_html, unsafe_allow_html=True)

# Fun√ß√£o para exibir o pop-up de boas-vindas usando streamlit-modal
def exibir_pop_up():
    if 'show_modal' not in st.session_state:
        st.session_state.show_modal = True

    modal = Modal(title="Bem-vindo ao An√°lise Curva ABC! üéâ", key="welcome_modal")
    if st.session_state.show_modal:
        with modal.container():
            # Corpo do Modal
            st.markdown("""
                <div class='modal-body'>
                    <p>
                        Este aplicativo foi desenvolvido para auxiliar na an√°lise da Curva ABC dos seus produtos, proporcionando insights valiosos para a otimiza√ß√£o do estoque e aumento do faturamento.
                    </p>
                    <p>
                        <strong>Funcionalidades Principais:</strong>
                    </p>
                    <ul>
                        <li>üìÇ <strong>Upload de Planilhas:</strong> Carregue seus dados em formato CSV ou XLSX.</li>
                        <li>‚ûï <strong>Adi√ß√£o Manual:</strong> Insira produtos diretamente pela interface intuitiva.</li>
                        <li>üîç <strong>An√°lise Avan√ßada:</strong> Utilize K-Means para identificar padr√µes e otimizar seu estoque.</li>
                        <li>üìà <strong>Visualiza√ß√µes Din√¢micas:</strong> Interaja com gr√°ficos detalhados para melhor compreens√£o.</li>
                        <li>üìÑ <strong>Relat√≥rios Personalizados:</strong> Gere PDFs profissionais com insights acion√°veis.</li>
                </div>
            """, unsafe_allow_html=True)

            # Rodap√© do Modal com bot√£o
            if st.button("‚ú® Come√ßar"):
                st.session_state.show_modal = False
                modal.close()

# Fun√ß√£o para exibir o menu principal
def menu_principal():
    selected = option_menu(
        menu_title=None,
        options=["An√°lise Clusters", "Visualiza√ß√µes", "An√°lise Gemini"],
        icons=["bar-chart", "graph-up", "file-earmark-text"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "background-color": "#ffffff"},
            "icon": {"color": "#27AE60", "font-size": "18px"},
            "nav-link": {"font-size": "16px", "text-align": "center", "margin": "0px", "--hover-color": "#27AE60"},
            "nav-link-selected": {"background-color": "#d1e7dd"},
        }
    )
    return selected

# Inicializar os campos de entrada no session_state se n√£o existirem
if 'nome_produto' not in st.session_state:
    st.session_state.nome_produto = ""
if 'preco_produto' not in st.session_state:
    st.session_state.preco_produto = 0.0
if 'quantidade_produto' not in st.session_state:
    st.session_state.quantidade_produto = 0

# Interface Principal
exibir_logo()
exibir_pop_up()
selected = menu_principal()

# Sidebar para Upload de Planilha e Adi√ß√£o Manual
st.sidebar.header("üì• Upload de Planilha")
uploaded_file = st.sidebar.file_uploader("Escolha um arquivo CSV ou XLSX", type=["csv", "xlsx"])

if uploaded_file:
    df_carregado = carregar_planilha(uploaded_file)
    if df_carregado is not None:
        if 'produtos' not in st.session_state:
            st.session_state.produtos = []
        produtos_existentes = pd.DataFrame(st.session_state.produtos)
        novos_produtos = df_carregado.to_dict(orient='records')
        df_novos = pd.DataFrame(novos_produtos)
        df_combined = pd.concat([produtos_existentes, df_novos], ignore_index=True)
        st.session_state.produtos = df_combined.to_dict(orient='records')
        st.sidebar.success("Produtos carregados com sucesso!")

adicionar_produto_manual()

# Conte√∫do das abas
if selected == "An√°lise Clusters":
    st.markdown("<div class='header-title'>üìä An√°lise da Curva ABC</div>", unsafe_allow_html=True)
    # Adicionando o bot√£o dentro da aba
    if st.button("üîç Determinar N√∫mero √ìtimo de Clusters"):
        if 'produtos' in st.session_state and st.session_state.produtos:
            df = pd.DataFrame(st.session_state.produtos)
            df_abc = calcular_curva_abc(df)
            df_abc = preprocessar_dados(df_abc)
            best_k = determinar_n_clusters(df_abc)
            st.session_state.best_k = best_k
        else:
            st.error("Nenhum produto foi adicionado.")

elif selected == "Visualiza√ß√µes":
    st.markdown("<div class='header-title'>üìà Visualiza√ß√µes</div>", unsafe_allow_html=True)
    if 'produtos' in st.session_state and st.session_state.produtos:
        df = pd.DataFrame(st.session_state.produtos)
        df_abc = calcular_curva_abc(df)
        df_abc = preprocessar_dados(df_abc)
        n_clusters = st.session_state.get('best_k', 3)
        df_clusterizado, centroids_df = aplicar_kmeans(df_abc, n_clusters=n_clusters)

        # Atualizar o estado com o DataFrame clusterizado
        st.session_state.df_clusterizado = df_clusterizado

        # Verificar se 'Valor Total' existe
        if 'Valor Total' not in df_clusterizado.columns:
            st.error("A coluna 'Valor Total' est√° faltando no DataFrame clusterizado.")
            st.stop()

        # Definir crosstab antes de usar
        crosstab = pd.crosstab(df_clusterizado['Classe'], df_clusterizado['Cluster'])

        # Distribui√ß√£o das Classes e Centr√≥ides em colunas lado a lado
        col1, col2 = st.columns(2)

        with col1:
            # Tabela de Produtos
            st.markdown("### üóÇÔ∏è Tabela de Produtos")
            st.dataframe(
                df_clusterizado[['Nome', 'Quantidade', 'Pre√ßo', 'Valor Total', '% Acumulado', 'Classe', 'Cluster']]
            )

        with col2:
            st.subheader('üìä Centr√≥ides dos Clusters')
            st.dataframe(centroids_df)

        # Gr√°ficos adicionais
        st.markdown("### üìà Gr√°ficos Adicionais")

        # Criar duas linhas de gr√°ficos com duas colunas cada para acomodar quatro gr√°ficos
        col3, col4 = st.columns(2)
        col5, col6 = st.columns(2)

        # Contar a distribui√ß√£o de classes
        class_counts = df_clusterizado['Classe'].value_counts()

        # Contar a distribui√ß√£o de Clusters
        class_counts2 = df_clusterizado['Cluster'].value_counts()

        with col3:
            st.subheader('üìä Classes ABC')
            fig, ax = plt.subplots(figsize=(3, 3))  # Tamanho reduzido
            ax.pie(
                class_counts,
                labels=class_counts.index,
                autopct='%1.1f%%',
                startangle=90,
                colors=sns.color_palette("pastel")[:len(class_counts)],
                wedgeprops={'edgecolor': 'white'}
            )
            ax.axis('equal')
            st.pyplot(fig)

        with col4:
            st.subheader('üìà Clusters')
            fig, ax = plt.subplots(figsize=(3, 3))  # Tamanho reduzido
            ax.pie(
                class_counts2,
                labels=class_counts2.index,
                autopct='%1.1f%%',
                startangle=90,
                colors=sns.color_palette("Set2")[:len(class_counts2)],
                wedgeprops={'edgecolor': 'white'}
            )
            ax.axis('equal')
            st.pyplot(fig)

        with col5:
            st.subheader('üìâ Dispers√£o')
            fig2, ax2 = plt.subplots(figsize=(3, 3))  # Tamanho reduzido
            sns.scatterplot(
                x='Quantidade',
                y='Pre√ßo',
                data=df_clusterizado,
                hue='Cluster',
                palette='deep',
                s=60,  # Tamanho reduzido
                edgecolor='white',
                alpha=0.7,
                ax=ax2
            )
            ax2.set_title("Dispers√£o de Pre√ßo x Quantidade", fontsize=10)
            ax2.grid(True, linestyle='--', alpha=0.5)
            st.pyplot(fig2)

        with col6:
            st.subheader('üî• Heatmap Classes ABC nos Clusters')
            fig, ax = plt.subplots(figsize=(6, 4))
            sns.heatmap(crosstab, annot=True, fmt='d', cmap='Greens', ax=ax)
            ax.set_title("Distribui√ß√£o das Classes ABC nos Clusters", fontsize=14)
            st.pyplot(fig)

    else:
        st.warning("Adicione ou fa√ßa upload de produtos para visualizar as an√°lises.")

elif selected == "An√°lise Gemini":
    st.markdown("<div class='header-title'>üìÑ An√°lise Gemini</div>", unsafe_allow_html=True)
    # Adicionando o bot√£o dentro da aba
    if st.button("üì§ Gerar Relat√≥rio"):
        if 'produtos' in st.session_state and st.session_state.produtos:
            df = pd.DataFrame(st.session_state.produtos)
            df_abc = calcular_curva_abc(df)
            df_abc = preprocessar_dados(df_abc)

            # Determinar o n√∫mero de clusters
            n_clusters = st.session_state.get('best_k', 3)
            df_clusterizado, centroids_df = aplicar_kmeans(df_abc, n_clusters=n_clusters)

            # Verificar se 'Valor Total' existe
            if 'Valor Total' not in df_clusterizado.columns:
                st.error("A coluna 'Valor Total' est√° faltando no DataFrame clusterizado.")
                st.stop()

            # Contar a distribui√ß√£o de classes
            class_counts = df_clusterizado['Classe'].value_counts()

            # Contar a distribui√ß√£o de Clusters
            class_counts2 = df_clusterizado['Cluster'].value_counts()

            # Visualiza√ß√µes (j√° inclu√≠das no relat√≥rio)
            crosstab = visualizar_abc_clusters(df_clusterizado)

            # Gerar an√°lise com Gemini
            gerar_analise_gemini(df_clusterizado)

            # Gerar o PDF
            pdf = gerar_pdf(df_clusterizado, class_counts, class_counts2, st.session_state.analise_gemini)

            # Armazenar no session_state
            st.session_state['pdf'] = pdf

            st.success("Relat√≥rio gerado com sucesso! Voc√™ pode baix√°-lo na barra lateral.")
        else:
            st.error("Adicione ou fa√ßa upload de produtos antes de gerar o relat√≥rio.")
    else:
        st.info("Clique no bot√£o para gerar o relat√≥rio em PDF.")

# Chamar a fun√ß√£o de download do PDF ap√≥s as abas
baixar_pdf_sidebar()

# Rodap√©
adicionar_footer()
